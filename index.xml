<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DY&#39;s blog</title>
    <link>http://4fan.top/</link>
    <description>Recent content on DY&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 04 May 2023 15:45:22 +0800</lastBuildDate><atom:link href="http://4fan.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>迁移到hugo</title>
      <link>http://4fan.top/posts/re-restart-in-hugo/</link>
      <pubDate>Thu, 04 May 2023 15:45:22 +0800</pubDate>
      
      <guid>http://4fan.top/posts/re-restart-in-hugo/</guid>
      <description>迁移到hugo 一个标题 上次写博客已经是22年6月的事情了,几乎是从入职开始，还没有写过啥。转眼间快1年了。在之前的某天发现基于hexo的博客可能是由于某些原因导致显示出现了问题，一直没处理。阶段性的尝试了几次，也没有处理好，反而遇到了各种奇奇怪怪的事（基于nodejs的东西，准确的说是npm的锅，总是给人有不稳定的感觉）。作为Gopher，很早就有迁移到hugo的想法，不过受限于一直没有找到现在这个主题(maupassant)的平替。终于在假期这最后时间重新决定处理下并顺利找到了hugo-maupassant.
description 工作快1年了&amp;hellip;
reviwie 从hexo hexo是20年3月开始处理的，那个时候大二下，现在已经23年5月，工作快1年。之前写的那些东西还有意义嘛？ 多看书，学点找到编程无关的东西&amp;mdash;&amp;gt;还是中间断断续续的看了一些东西，但其它的爱好仍然匮乏&amp;hellip;&amp;hellip;虽然工作耗去了日常的很多时间，应该认识到这是未来很长很长很长一段时间的常态。所以还是要转变下心态，多主动些，多点勇气去尝试。 其它要做的：最终算是实现了自己当时的目标吧。
向未来 多一点勇气，尝试不同的东西等等，也包括其它方面的，再多一点勇气。
再多一点乐观
还是要多看一看书
附：hexo时写的
一个标题 博客跑了一段时间了，上一个跑在阿里云上的也跑了半年多了。
时间总是过的很快。从虚拟主机CPanel到hostdie，还有博客园，如今跌跌撞撞最后又回到了hexo。原因无它：简单。
以前总觉着自己写一套模板，用别人的总觉着太low。现在却以简为美，反而对这些花里胡哨的东西失了兴趣。也不再打算自写或者重构博客了，以后将一直用hexo。之前的博客也将逐步搬移过来【但可能有点麻烦，毕竟不是hexo写的，也没用md】。
希望用博客记录自己成长。
写给自己： 多看书，学点找到编程无关的东西
近期要做的： 看基础的书
数据库相关
刷leetcode</description>
    </item>
    
    <item>
      <title>阅读</title>
      <link>http://4fan.top/reading/</link>
      <pubDate>Thu, 04 May 2023 10:37:26 +0800</pubDate>
      
      <guid>http://4fan.top/reading/</guid>
      <description>这里记录了读的一些书</description>
    </item>
    
    <item>
      <title>spring注解</title>
      <link>http://4fan.top/posts/spring%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Thu, 30 Jun 2022 22:36:34 +0000</pubDate>
      
      <guid>http://4fan.top/posts/spring%E6%B3%A8%E8%A7%A3/</guid>
      <description>spring context 注册组件 xml方式 resources下：标签&amp;ndash;&amp;gt; ClassPathXmlApplicationContext(&amp;ldquo;beans.xml&amp;rdquo;);
注解方式 @Configuration: 放在配置类上。配置类 @Bean: 获取对象的方法，默认id为方法名。可通过注解value指定id。
@ComponentScan：放在配置类上 (value=&amp;ldquo;top.fan4.dy&amp;rdquo;，excludeFilter按照不同方式排除，include)==&amp;gt;@ComponentScans。也可自定义过滤规则
@Scope：调整作用域 singleton 默认单例 IOC启动时即创建。饿汉模式 @Lazy 懒加载 prototype 多实例 获取时即重新创建 request(web) session(web)
@Condational 满足条件时注册bean。可放在类或者方法上 condationClass implements Condation。 @Condational(condationClass.class)
组件注册方式：
包扫描【@ComponentScan配置类上】 + 组件注解标注（标注了@Controller(controller层),@Service(serice层),@Repository(dao层),@Component）可被扫描加入容器
@Bean 【方法上】 (第三方组件,注册在方法上返回创建对应对象的类即可)
@Import 【配置类上】 (快速给容器导入组件) {Class.class}id为全类名。 ImportSelector: class MyImportSelector implements ImportSelector{全类名} @Import({MyImportSelector.class}) @ImportBeanDefination 手动注册
FactoryBean class MyBeanFactory implements FactoryBean{} @Bean public MyBeanFactory MyBeanFactory(){return new MyBeanFactory()} xxxx.getBean(&amp;ldquo;MyBeanFactory&amp;rdquo;) getBean(&amp;quot;&amp;amp;MyBeanFactory&amp;quot;) ==&amp;gt; 得到实际的bean|MyBeanFactory
生命周期 @Bean() 设置初始化(init)方法和销毁(destory)方法。在创建对象完成和容器关闭时。多实例时不管理bean和销毁。 bean implements InitializingBean,DisposableBean jsr250 @PostConstruct(方法上使用，对象创建和赋值之后调用) 和 @PreDestory(方法上使用，容器移除对象之前) BeanPostProcessor【interface】 BeanPostProcessor 包装返回obj 生命周期：初始化-&amp;gt;对象创建完成-&amp;gt;赋值-&amp;gt;初始化方法-&amp;gt;BeanPostProcessor-&amp;gt;postProcessAfterInitialation 属性赋值 pre: 配置文件的导入：(导入外部文件到运行环境变量) xml：{context:property-placeholder location=&amp;ldquo;classpath:person.</description>
    </item>
    
    <item>
      <title>rust生命周期标注</title>
      <link>http://4fan.top/posts/rust%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A0%87%E6%B3%A8/</link>
      <pubDate>Thu, 21 Apr 2022 13:04:20 +0000</pubDate>
      
      <guid>http://4fan.top/posts/rust%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A0%87%E6%B3%A8/</guid>
      <description>前置 需要理解变量生命周期。
显式标注的特点 不改变引用的生命周期，描述多个生命周期的关系
显式标注的意义和作用 给编译器提示，帮助编译器判断所写的代码是否安全(避免悬垂引用)。
&amp;lt;==&amp;gt;描述函数输入参数和输出参数的关系以帮助编译器检查所写的代码是否符合预期
&amp;lt;==&amp;gt;编译器根据函数的标注对函数调用时的传参情况判断。（限制函数的调用处于安全）
&amp;lt;==&amp;gt;确切的说是当用户添加显式标注时表达了用户对此函数输入输出引用参数的生命周期的期待，编译器根据用户的期待与相关变量的实际生命周期对比以判断是否满足。
&amp;lt;==&amp;gt;其实编译器都知道，主要是反过来提示用户注意此代码是否为安全的。
例子和说明 fn longest&amp;lt;&amp;#39;a&amp;gt;(x: &amp;amp;&amp;#39;a str,y: &amp;amp;&amp;#39;a str) -&amp;gt; &amp;amp;&amp;#39;a str { // &amp;#39;a是xy中较小的那个（以保证安全） 假设返回的那个引用拥有最短的生命周期以保证安全 if x.len() &amp;gt; y.len() { x } else { y } } // main 1 fn main() { let str1 = String::from(&amp;#34;hello&amp;#34;); let result; { let str2 = String::from(&amp;#34;world&amp;#34;); // result的生命周期是较短的即str2，此时在离开此作用域后调用println宏时 // 的result是不能保证未被释放，因此报错。 result = longest(&amp;amp;str1, &amp;amp;str2); } println!(&amp;#34;The longest string is {}&amp;#34;, result); } // main 2 fn main() { let str1 = String::from(&amp;#34;hello&amp;#34;); { let str2 = String::from(&amp;#34;world&amp;#34;); let result = longest(&amp;amp;str1, &amp;amp;str2); // 即使result是较短的那个生命周期(str2)，但仍然在str2的作用域内调用，因此可保证安全。 println!</description>
    </item>
    
    <item>
      <title>go mongodb的一些实践</title>
      <link>http://4fan.top/posts/go-mongodb%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 14 Mar 2022 16:23:32 +0000</pubDate>
      
      <guid>http://4fan.top/posts/go-mongodb%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>go错误处理</title>
      <link>http://4fan.top/posts/go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 14 Mar 2022 16:19:09 +0000</pubDate>
      
      <guid>http://4fan.top/posts/go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>Sentinel errors 哨兵模式，例如
​	if io == io.EOF 优缺点：需要导包，可能循环引用
Error Types ​	包含error以及其它信息的结构体
优缺点：需要导包，循环引用。但可得到更多的信息。比哨兵模式更好一点。
Opaque errors 黑盒策略，不关心具体错误类型，有错误则返回否则继续或根据是否具有某种行为（实现某种接口）判断是否重试。demo：
func fn() error { x, err := bar.Foo() if err != nil { return err } // use x return nil } // type temporary interface {	Temporary() bool} func IsTemporary(err error) bool {	te, ok := err.(temporary)	return ok &amp;amp;&amp;amp; te.Temporary() } pkg/errors 携带一个message并可返回原始error以进行Sentinel errors比较的库：github.com/pkg/errors 可避免在多个层多次处理eror
go1.13标准库的升级 https://www.flysnow.org/2019/09/06/go1.13-error-wrapping.html
errorf %w &amp;ndash;&amp;gt;不丢失原error的wrap error。 Unwrap 解一层wrap error Is wrap chain中是否包含 As error转换（断言） rob pike：Errors are values 法1：</description>
    </item>
    
    <item>
      <title>drone cicd实践</title>
      <link>http://4fan.top/posts/drone-cicd%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 09 Mar 2022 11:51:15 +0000</pubDate>
      
      <guid>http://4fan.top/posts/drone-cicd%E5%AE%9E%E8%B7%B5/</guid>
      <description>​	在写一个后端的时候，前端的同学需要将接口部署上去。后端还在不断的迭代，因此需要反复编译部署十分麻烦，因此决定将这一套自动化。记录了在使用drone过程中踩的一系列坑。
选型 jenkins：war包， 需要java环境，比较吃内存，生态比较完善。 drone： go实现，可docker直接运行，文档不够详细。 由于之前Jenkins的不好体验，因此这次选择drone。
drone基本概念 drone由server和runner构成。两者通过rpc交互。
server端为web管理服务，可直接通过docker运行。
runner实际执行工作流的部分。
一个Go程序借助gitee的cicd demo 所需物料：gitee账号，配置好docker和go编译环境的linux
配置gitee
​	gitee设置&amp;ndash;&amp;gt;第三方应用&amp;ndash;&amp;gt;创建第三方应用
​	应用主页 ：linux主机ip,例如： http://xxx.xxx.xxx.xxx（此处使用http而非https，和后续一致）
​	应用回调地址 ：应用主页地址 + &amp;ldquo;/login&amp;rdquo;.例如：http://xxx.xxx.xxx.xxx/login
**权限** ：选择projects，pr，hook必选。 创建一个secret并记录。可使用以下命令：
$ openssl rand -hex 16
在gitee中创建好的应用中读取并记录 Client ID 和 Client Secret 以备下步使用
运行server，此处使用docker方式
# ！！！注意替换环境变量 # DRONE_GITEE_CLIENT_ID和DRONE_GITEE_CLIENT_SECRET对应第三步获得的。 # DRONE_RPC_SECRET runner和server交互的secret。任意值，推荐使用第二步生成的值 # DRONE_SERVER_HOST 填写本机公网ip即可 # DRONE_SERVER_PROTO选择 http 以和第一步对应 # DRONE_USER_CREATE需创建超级管理员账号时请添加此环境变量，否则不需要。（trusted仓库时需要，此demo中不需要 docker run \ --volume=/var/lib/drone:/data \ --env=DRONE_GITEE_CLIENT_ID=f7018cd1a520c9e6f7eca37b97761de20 \ --env=DRONE_GITEE_CLIENT_SECRET=8a6bfd074b3c7befe72d5f9647ed02c \ --env=DRONE_RPC_SECRET=super-duper-secret \ --env=DRONE_SERVER_HOST=drone.</description>
    </item>
    
    <item>
      <title>2021年总结</title>
      <link>http://4fan.top/posts/2021%E5%B9%B4%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 25 Jan 2022 22:11:42 +0000</pubDate>
      
      <guid>http://4fan.top/posts/2021%E5%B9%B4%E6%80%BB%E7%BB%93/</guid>
      <description>​	上次写点什么已经是大概一年前了。想稍微写点啥的想法持续有一段时间了。今天终于在北方的小年这一天写点，全当是如标题所说的21总结了。
最近在干啥？ ​	自从1号回来，几乎没把自己安排的很满(主要是懒)。上午大概就躺过去了。下午大概就看看电视。一般会在晚上写写代码，或者看一些东西(最近看了点netty)。刚回来的前几天玩了下nodemcu。正是因为过于颓废才使得今天决定要写点东西😂
流水账 warm-up ​	后疫情时代总是感觉过的很快。20年的下半年是疫情后开学的第一个学期，重回校园却总感觉和以前不太一样了。在这种恍惚也有一种紧张感(为找实习)。在开学的前几周陆续地刷了一部分题，还记得那一段时间总是在接近0点的时候从易班刷完题回宿舍。也伴随着一种迷茫。到了后半个学期基本上就很难继续下去了。即使已经决定转行，在专业课仅想摆烂通过的情况下，由于课程难度的问题，也需要耗费一番精力。大概10周之后就不断的有课程结课、考试，一直持续到18周(我校每学期18周)。加上后边由于一场感冒引起的一些问题几乎持续到了学期结束。
找实习 ​	2020年算是后疫情的又一个新年。对于互联网行业，实习来的非常早。刚过完年就陆续有公司开始了暑期实习的招聘。虽然自开学后继续刷题，开始准备面试，但总感觉自己的准备不够充分。也因此错过了很多的招聘。4月中终于开始投了一些公司。第一场来自百度的笔试，然后是腾讯/字节的笔试。第一场来自百度的面试，很遗憾由于一些原因没有通过。之后又挂在字节教育部门的三面。此时已大概5月多。对于一个简历投递比较晚开始的菜鸟来说略有尴尬了，因为暑期实习的招聘即将就要结束了。好在后续来自鹅的一系列面试比较顺利，也最终拿到了offer。虽然最后run了，但是依旧感恩我所在的组捞了我，给了我一段经历。
实习 ​	7月初，逃离了工地带专和小学期去了sz。刚开始第一次来到南方，这么南端的地方有很多的不习惯。到最后的习惯了社畜的日常摸鱼。&amp;hellip;&amp;hellip;..
返回和继续 ​	老实说9月初回学校是有些失望和压力的。大概是没达到自己预想到的那样(无转正，无其它offer)。在学校的事情暂时告一段落之后继续了秋招。从8月底到9月中，陆续3次挂在了字节不同部门的一面。抖音电商(后端)，教育和抖音电商(客户端)。属实是让人有一些失去自信了。再之后小米二面挂(挂的很尴尬&amp;hellip;..)。11月来的比较顺利了。百度上午连续三面过，随后mt也比较顺利的过了。和当时找实习一样，在比较晚的时间，在略有压力的情况下，最后有个相对还 彳 亍的结果。（其实2次即使在比较失落时也比较坚信自己最终应该能取得一个不错的结果，但在结果来到之前依然会有压力和焦虑😔。
今年看/学/玩了点啥吗？ 除去一些为了准备实习/秋招之外的：
计算机网络教程:自顶向下方法:a top-down approach（部分
深入理解计算机系统:a programmer&amp;rsquo;s perspective（主要是感兴趣的部分：内存管理，异常和系统编程部分
陆陆续续看了点rust方面的东西，有分享，有书
10月玩了一小段时间树莓派（虽然面临秋招等，但是遇到想玩的还是要花时间玩下的😄
lab: writing an os in rust( ing
22年1月初玩了几天nodemcu
翻一些很杂的书，比如ddia(reading
其它各种很杂的一些分享
我算是一个兴趣广泛的（或者说三分钟热度😂
碎碎念 ​	今天，在村外的路上看着零星还未融化的雪在田野里包裹着村落，还有远处的落日。按照正常的放假安排，工作之后，可能未来的几年，我都很难在一年的小年时回到家里，经历一些场景。我们总是在陆陆续续的丢弃一些过去的生活/习惯或者？也在向前😀
明年：多读书(不仅限于技术类)，多写写文章有产出，锻炼身体，闲了学学🎸（多半又要失败了😂。然后把之前看的一些东西整理出来
:语言表述能力和写作能力太差，要多练习（倒不是表达能力差，而是缺少一种整体的感觉和写作的技巧，事实上在一些比较具体的问题上我倒是具有一种很快而准确的表达能力，但若要写起长一点的东西就容易不知所云&amp;hellip;.</description>
    </item>
    
    <item>
      <title>nginx常用配置</title>
      <link>http://4fan.top/posts/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 11 Mar 2021 16:05:58 +0000</pubDate>
      
      <guid>http://4fan.top/posts/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>控制以及常用命令: 1. 信号： http://nginx.org/en/docs/control.html 2. 命令 nginx -t #检查配置文件语法 nginx -c file #检查指定路径的配置文件语法 nginx -s reload #热重载，修改配置文件后使用 nginx -s stop #强制停止 nginx -s quit #优雅的停止 nginx -h #查看帮助 nginx -v #版本 nginx -V #查看编译参数 http段 #nginx 的 default_server 指令可以定义默认的 server 出处理一些没有成功匹配 server_name 的请求，如果没有显式定义，则会选取第一个定义的 server 作为 default_server。 server{ listen 80; server_name z.com; location / { root /home/html; #通常用绝对路径 index index.html; } } server{ listen 80; server_name 192.168.1.200; location / { root /var/www/html; #通常用绝对路径 index index.</description>
    </item>
    
    <item>
      <title>CSAPP读书笔记-8-异常控制流(ECF)</title>
      <link>http://4fan.top/posts/csapp%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-8-%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81-ecf/</link>
      <pubDate>Mon, 08 Mar 2021 23:50:22 +0000</pubDate>
      
      <guid>http://4fan.top/posts/csapp%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-8-%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81-ecf/</guid>
      <description>​	现代系统通过使控制流发生突变来对系统状态的变化(例如:硬件定时器产生的周期信号，包到达网络适配器&amp;hellip;)做出反应，我们把这些突变称作异常控制流。异常控制流发生在系统的各个层次。（包括硬件层，内核层，应用层）。理解ECF将有助于你理解OS的I/O，进程和虚拟存储器机制，有助于理解应用程序如何与OS交互(system call/trap)，有助于理解并发，软件异常，编写有趣的程序。
8.1异常：概述 异常的机制 ​	系统为每种异常分配一个非负的异常号。一部分是处理器的设计者分配，另一部分则由操作系统的设计者分配。前者的示例包括：零除，缺页，存储器访问违例，断点以及算术溢出【主要是硬件相关的】。后者的示例包括系统调用和来自I/O设备的信号【主要是操作系统能够处理的】。由操作系统分配的异常号在操作系统启动时初始化一张称为异常表的跳转表。当发生异常时通过下面的方式计算出异常处理程序的地址：
异常表基址寄存器 + 异常号*4 异常处理后 返回触发异常的指令(eg:内存缺页异常) 返回到下一指令(eg:系统调用) 终止被中断的程序 异常的分类 异常分类 异常产生原因/说明 异常处理之后的操作 备注 中断 I/O设备的信号 返回到下一条指令 I/O设备指：网卡，磁盘，定时器等 陷阱 有意引起的异常 返回到下一条指令 系统调用引起 故障 可恢复的异常 可能返回到当前指令 如缺页故障 终止 不可恢复的异常 不返回 硬件错误 注：中断是四种异常中唯一的异步异常。
Linux的系统调用 在x86架构上，Linux系统的系统调用通过一条成为 int n的陷阱指令完成。历史上是通过128(0*80)异常号实现。
按照惯例，寄存器%eax包含系统调用号，寄存器ebx,ecx,edx,edi,esi和ebp存储最多6个任意的参数【esp不能使用，原因是进入内核模式时会被覆盖掉】。以上的规则我们称之为调用规约。
注：为提高性能，在最新的架构和操作系统下有一种新的系统调用的实现机制（利用 SYSENTER / SYSEXIT指令）
扩展阅读：
https://github.com/cch123/llp-trans/blob/master/part3/translation-details/function-calling-sequence/calling-convention.md
https://github.com/cch123/asmshare/blob/master/layout.md
8.2进程 进程为程序提供了两个非常重要的抽象：
一个独立的逻辑控制流：好像我们的程序独占的使用处理器 一个私有的地址空间：好像我们的程序独占的使用存储器系统 用户模式和内核模式 处理器通常是用某个控制寄存器中的一个模式位来标记程序是否可以执行的某些指令和访问某些特定的地址空间[即内核模式]。用户从用户模式进入内核模式的唯一方式是通过某种异常，当异常处理完毕后重新改为用户模式。
上下文切换（调度） 内核为每一个进程维持一个重新开始一个先前被抢占的进程所需的状态，称之为上下文(包括各种寄存器，用户栈，内核栈和各种内核数据结构，如页表，进程信息表，文件表)。通过上下文切换的机制实现控制转移到新的进程。当内核代表用户执行系统调用时可能发生上下文切换（典型的那些慢系统调用），中断也可能引发上下文切换。
高速缓存污染 一般而言硬件高速缓存存储器不能和诸如中断和上下文切换这样的异常控制流很好地交互。当中断发生或返回时告诉缓存对于当前执行的代码段总是冷的（即程序所需的数据都不在告高速缓存中，这也很好理解，因为局部性原理）。
8.3 系统调用错误处理 unix中的系统调用发生错误时通常返回-1并设置errno变量。我们可以通过strerror(errno)函数得到出错原因对应的字符串。程序员应该像例如demo1这样总是去检查错误(像go的返回值总是包含一个error类型，更极端的rust返回一个枚举类型强制你去处理)。然而这样会导致程序变得臃肿难懂。我们可以简化这个代码(参见demo2)。更进一步，习惯上可以为系统调用进行一种例如demo3这样的封装(似乎APUE里提到过这玩意)，称之为包装函数。
//demo1: if( (pid = fork()) &amp;lt; 0){ fprintf(stderr,&amp;#34;fork err:%s\n&amp;#34;,strerror(errno)); exit(0); } //demo2 void unix_error(char *msg){ fprintf(stderr,&amp;#34;fork err:%s\n&amp;#34;,strerror(errno)); exit(0); } if( (pid = fork()) &amp;lt; 0){ unxi_error(&amp;#34;fork error&amp;#34;); } //demo3 // Fork是一个参数和返回值与fork均相同的函数 pid_t Fork(void){ pid_t pid; if( (pid = fork()) &amp;lt; 0) unxi_error(&amp;#34;fork error&amp;#34;); return pid; } 8.</description>
    </item>
    
    <item>
      <title>nodejs tips</title>
      <link>http://4fan.top/posts/nodejs-tips/</link>
      <pubDate>Thu, 18 Feb 2021 23:00:40 +0000</pubDate>
      
      <guid>http://4fan.top/posts/nodejs-tips/</guid>
      <description>作为一个不常写前端的菜鸟，看到node在C盘留下及其离谱大小的缓存，加上电脑垃圾，所以要给默认的缓存换个目录： ​	【node_global】及【node_cache】
npm config set prefix &amp;ldquo;D:\Develop\nodejs\node_global&amp;rdquo; npm config set cache &amp;ldquo;D:\Develop\nodejs\node_cache&amp;rdquo; 环境变量： 将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】 在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】 安装淘宝镜像: npm install -g cnpm &amp;ndash;registry=https://registry.npm.taobao.org
设置默认镜像源：【二选一即可】 npm config set registry https://mirrors.huaweicloud.com/repository/npm/	华为镜像 npm config set registry https://registry.npm.taobao.org	淘宝镜像 npm cache clean -f	清理缓存
Linux下可能遇到的问题及解决 sh: 1: node: Permission denied:
npm config set user 0 npm config set unsafe-perm true
未完待续&amp;hellip;..</description>
    </item>
    
    <item>
      <title>idea常用快捷键</title>
      <link>http://4fan.top/posts/idea%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Thu, 18 Feb 2021 22:26:06 +0000</pubDate>
      
      <guid>http://4fan.top/posts/idea%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>Home/End 光标快速定位至行首/行末 或者 shift + 小键盘 1 、 7 推荐alt + [ / ] * alt + f12 打开终端	* esc 切换焦点到代码编辑区 * shift + esc 关闭工作区
alt +1 打开/关闭 左侧project
整行左移 选中整行tab或shift tab 推荐：Ctrl +[ / ] 整行左、右移 *
快捷键：Ctrl + W ctrl + shift + w * Ctrl + Shift + 数字键 标记/取消标记代码 Ctrl + 数字键 跳至标记好的点 f12 切换到最近使用的工具窗口 ctrl + - 代码折叠 ctrl + g 跳指定行/列 Ctrl + B、Ctrl +鼠标左键 跳到声明处 Ctrl + F12 显示当前文件结构。 Ctrl+F 查找 Ctrl+R 替换 Ctrl + y 删除一行 * ctrl + x 剪切一行 * Ctrl + d 复制一行 * F2 下一个错误 alt + f7 查找引用 Ctrl + z 撤销 Ctrl + Shift + z 反撤销 F3，查找下一个 * Shift+F3，查找上一个 alt+shift + 鼠标左键 多处选中 * Ctrl+Shift+J，整合两行 Alt+1，快速打开或隐藏工程面板 * Ctrl+Alt+B，跳转到方法实现处 Ctrl+Shift+Backspace，跳转到上次编辑的地方 * ctrl +shift +e 最近修改的文件 * Shift Shift 根据文件名称进行搜索 Ctrl + Shift + f 全局搜索 Ctrl + N 或 Ctrl+Shift+N 全局搜索或按文件名搜索 Alt+F7 查找类或方法在哪被使用 Shift+Shift 搜索任何东西 Ctrl + Alt + s idea 设置 Ctrl + Alt + Shift + s project 设置 Ctrl + Shift + u 大小写转换 java常用： ​	alt + insert 功能及其强大的快捷键</description>
    </item>
    
    <item>
      <title>wsl2折腾笔记</title>
      <link>http://4fan.top/posts/wsl2%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 16 Oct 2020 13:16:05 +0000</pubDate>
      
      <guid>http://4fan.top/posts/wsl2%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</guid>
      <description>背景： 学生机上配置好了Hadoop跑WordCount的demo时出现内存不足的问题，尝试解决没有成功。因此只能从本地虚拟机上跑。但是VM挂了，而且体验不是很好，所以打算试试wsl2 + docker的方案迁移过去。
安装 主要参考 ms的文档： https://docs.microsoft.com/zh-cn/windows/wsl/install-win10 (ms的文档其实很棒，步骤清晰并且有常见问题解答)
运行中输入winver查看版本，如果运行的是 Windows 10 版本1903 或 1909，请在 Windows 菜单中打开“设置”，导航到“更新和安全性”，然后选择“检查更新”。 内部版本号必须是 18362.1049+ 或 18363.1049+，次要内部版本号需要高于 .1049。 以管理员身份打开 PowerShell 并依次运行以下2条命令： dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 下载并安装升级包.【如果下载慢可以尝试迅雷等其它方案，如果安装失败重启可能有帮助】 将 WSL 2 设置为默认版本： powershell中 &amp;ndash;&amp;gt;wsl --set-default-version 2 安装Linux 分发版 https://aka.ms/wslstore 其它说明(重要) 每次你可以通过在 power shell中运行 bash 命令来打开wsl2
当你停止使用时在power shell中输入 wsl --shutdown关闭相关进程。
你可以通过 wsl &amp;ndash;help查看帮助，借助 wsl的export/import等指令你可以完成快照或将wsl中的操作系统移动到非系统盘。
补充 Ubuntu为例的一些常用操作
配置SSH #1. 重装SSH sudo apt-get purge openssh-server sudo apt-get install openssh-server # 如果需要配置远程开发环境sudo apt-get install openssh-client openssh-server openssh-sftp-server #2.</description>
    </item>
    
    <item>
      <title>linux定时任务</title>
      <link>http://4fan.top/posts/linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Mon, 28 Sep 2020 21:04:44 +0000</pubDate>
      
      <guid>http://4fan.top/posts/linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid>
      <description>Linux定时任务 背景：寒假在家看到必应每日的壁纸不错，加上在学golang想练手，萌生了把每日壁纸收藏的想法。简单分析后搞定，通过ticker每24小时执行一次任务。一直执行了180+天一切正常。之后莫名panic(tail了下nohup的日志，没看出来&amp;hellip;.)。一直懒得找原因，于是打算改为Linux定时任务。
cron 简介 cron是Linux系统自带(各发行版均有)的一个定时任务执行工具。通过 ps aux|grep crond可以看到对应的进程。由此也可以了解到此进程为守护进程。
简单使用 crontab -l 命令可列出已经设置当前的任务。
crontab -e 用于编辑计划任务:
按照 分 时 日 月 星期 任务的格式指定在对应时间执行相应的任务。
对于日期格式的指定：
&amp;ldquo;*&amp;ldquo;表示每一 &amp;ldquo;,&amp;ldquo;表示并列多个时间 &amp;ldquo;-&amp;rdquo; 指连续，例如你可以设置 20-40则表示在20,40]都执行一次共21次 &amp;ldquo;/&amp;ldquo;整除 &amp;ldquo;L&amp;rdquo; 年的最后月/月的最后一天 除此之外，日期设置上也可以使用缩写：MON，JUL&amp;hellip;等
例如：你可以使用通过 crontab -e并设置内容 &amp;quot; * * * * * echo `date` &amp;raquo; $HOME/date.txt	&amp;quot;
来指定每分钟输出一次日期并追加到文件 date.txt中。
补充：
*/2 &amp;lt;==&amp;gt;0/2 ，0，2，4，6&amp;hellip; 1/2 则表示减去1能整除2，即1，3，5，7 &amp;hellip; 更多参考 man page
一个坑：虽然不能算是cron
​	从cron启动时的工作目录不是原路径，相对路径失效了。。。
未完待续。。。。</description>
    </item>
    
    <item>
      <title>Spring(1): Why Spring</title>
      <link>http://4fan.top/posts/spring-1-why-spring/</link>
      <pubDate>Sat, 29 Aug 2020 23:23:40 +0000</pubDate>
      
      <guid>http://4fan.top/posts/spring-1-why-spring/</guid>
      <description>耦合的概念：
传统的开发中，通常会在main方法或者业务中根据需要创建对应的对象。 public static void main(String []args){ Obj o = new Obj(); .... } ​ 这样的结果就是程序中(不同类之间)的耦合非常大，而带来的问题就是不利于程序后期的维护(试想，当我们因为业务改变而需要修改Obj类或者改为创建新的类时，我们不得不修改源程序，而这违背了面向对象程序设计的开闭原则)。
现在思考如何解决这个问题呢？
通过反射来加载类(class.forName，我们在加载数据库驱动时经常会这样做) 通过加载配置文件读取全限定类名[使用propities.getClassLoader.getResourceAsStream相关命令] tip:有些同学会疑问，这样依然需要写类名，仍然会有耦合。注意，降低耦合并不等于完全消除耦合。
而Spring就是一个完成这样功能框架。[ Spring是一个轻量级控制反转(IoC)和面向切面(AOP)的容器框架 &amp;mdash;&amp;ndash;摘自百度百科]
关于控制反转：控制反转的主要作用是降低耦合，为什么叫做控制反转呢？我们将在下文中提到。
关于 bean：编程英语中bean通常指的是可重用组件，而在Java中一般指类。
Spring如何使用呢？
创建bean.xml [可参考官网, 最小仅需要id和class属性。] 一个简单的bean.xml的例子:
&amp;lt;bean id=&amp;#34;accountService&amp;#34; class=&amp;#34;top.4fan.dy.service.impl.AccountServiceImpl&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; 创建对应的所需要获得的对象对应的类文件。 在需要的位置(比如main)通过如下方式获得需要的对象： ApplicationContext ac = new ClassPathXmlApplicationContext(&amp;#34;bean.xml&amp;#34;) //一下两种方法无本质区别 Obj o1 = (Obj)ac.getBean(&amp;#34;xml里边的id&amp;#34;); Obj o2 = ac.getBean(&amp;#34;xml里边的id&amp;#34;,xxx.class);//这种方法不需要强转 ApplicationContext类有三个常用的实现类(我们以上仅用到一种,其它的用法场景如下)：
ClassPathXmlApplicationContext :加载类路径下的配置文件【配置文件必须在类路径下】
FileSystemXmlApplicationContext：加载磁盘上任意有权限[指操作系统级别的权限]的文件
AnnotationConfigApplicationContext：读取注解创建容器
​ 所有的ApplicationContext类都有立即加载的特征，即``new xxxApplicationContext时即创建对象。与之相对应的另一种用于获得对象的XmlBeanFactory`(3.1已被标注放弃)类则在需要时创建对象。对于未使用到的另外两个常用类，可以参考Spring文档。
所以最后一个问题，为什么叫做控制反转呢？
​	在传统的代码中，我们通过自己创建对象并控制对象的生命周期(初始化&amp;hellip;&amp;hellip;销毁)，而使用Spring时，对象的生命周期则由Spring管理，即我们把对象的控制权交给了Spring容器。
tip:如果你对面向对象程序设计中的设计模式部分比较熟悉的话，你可以将Spring理解为一个工厂模式的实现。
// 补充AnnotationConfigApplicationContext demo // 在配置类上添加注解的方式来替代xml配置文件 // 1. 配置类上添加 @ComponentScan([扫描路径])并且在bean类上添加@Component注解 // 2.</description>
    </item>
    
    <item>
      <title>docker笔记</title>
      <link>http://4fan.top/posts/docker%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 28 Aug 2020 15:26:44 +0000</pubDate>
      
      <guid>http://4fan.top/posts/docker%E7%AC%94%E8%AE%B0/</guid>
      <description>安装：yum -y install docker-ce 开启：systemctl start docker 开机自启:systemctl enable docker docker version docker：docker run hello-world 查看帮助： docker | docker image 拉取镜像：docker pull mariadb Dockerfile:名字不能修改 # StudyDocker from scratch add hello / cmd [&amp;#34;/hello&amp;#34;] docker history ID docker build -t gochaochao/hello-world . docker run -it centos 交互式，进入此系统 docker container ls (-a) docker container ls -aq 列出ID docker rm ID / docker rm $(docker container ls -aq) 删除 docker container ls -f &amp;#34;state=exited&amp;#34; -q //没运行的 docker exec -it ID /bin/bash //进入容器交互 docker run -d -p 9000:80 --name=web nginx //端口映射，后台 --network none/bridge/host // 无网络，安全/桥接/共享宿主机命名空间 -e redius-host=39.</description>
    </item>
    
    <item>
      <title>GitHub入门级使用技巧</title>
      <link>http://4fan.top/posts/github%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E5%85%A5%E9%97%A8%E7%BA%A7/</link>
      <pubDate>Tue, 25 Aug 2020 16:45:13 +0000</pubDate>
      
      <guid>http://4fan.top/posts/github%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E5%85%A5%E9%97%A8%E7%BA%A7/</guid>
      <description>常用词含义 watch - 会持续收到该项目的动态 fork - 复制某个项目到自己的GitHub仓库 star - 可以理解为点赞 clone - 下载到本地 follow - 关注感兴趣的作者，会收到他们的动态 限制搜索 xxx in:name - 项目名字中含有xxx xxx in:description - 描述中含有xxx xxx in:readme - 在readme中包含 language:go - 指定语言go语言 star&amp;amp;fork stars:&amp;gt;= 5000
forks:&amp;gt;500
stars:100..200 forks:10..20
awesome awesome xxx	收集学习、工具、书籍类相关项目 #L+number 地址 + #L+number - 高亮显示某一行 eg: https://github.com/codingXiaxw/seckill/blob/master/src/main/java/cn/codingxiaxw/dao/SeckillDao.java#L14 地址 + #L+num1-L+num2 - 高亮显示 num1-num2 项目内搜索及快捷键 点击 Go to file(绿色的Code左侧) GitHub其它快捷键
找大佬 location:beijing language:go 推荐链接：
Advanced search
searching-on-github</description>
    </item>
    
    <item>
      <title>Go Module下使用本地包</title>
      <link>http://4fan.top/posts/go-module%E4%B8%8B%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%8C%85/</link>
      <pubDate>Mon, 17 Aug 2020 21:16:29 +0000</pubDate>
      
      <guid>http://4fan.top/posts/go-module%E4%B8%8B%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%8C%85/</guid>
      <description>介绍两种方式： 方式一（推荐）: 严格的说，方式一是使用项目目录下的go文件。 项目目录如下：
|── studyModule	//项目主目录
|	|──log	//主目录下文件夹
|	|	|──log.go	// log目录下go文件
|	|── main.go	// 主目录下go文件
|	|── go.mod
log.go 中首行 package log，注意，log文件夹下不要go mod init，否则会导致无法编译
studyModule文件夹下 go mod init sts
main.go中调用log.go中的方法：import &amp;ldquo;sts/log&amp;rdquo;-&amp;gt; 此处为主目录下的mod名下边的log文件夹
log目录下的方法,变量等依然需要大写。如果不能正常使用可尝试在主目录下执行go mod tidy
方式二（使用go mod replace） |── studyModule	//项目主目录
|	|──4fan.top	//主目录下文件夹
|	|──|──DY
|	|	|	|──DYlogger@v1.1.0
|	|	|	|	|	|──*.go
|	|	|	|	|	|──go.mod【2】
|	|── main.go	// 主目录下go文件</description>
    </item>
    
    <item>
      <title>rust环境配置</title>
      <link>http://4fan.top/posts/rust%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 17 Aug 2020 21:09:20 +0000</pubDate>
      
      <guid>http://4fan.top/posts/rust%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>Windows 环境配置： 1. 创建2个文件夹 2. CARGO_HOME : 刚才创建的对应文件路径, 如: E:\Environment\RUST\CARGO RUSTUP_HOME: 刚才创建的对应文件路径, 如: E:\Environment\RUST\RUSTUP 3. 配置安装源: [设置环境变量] RUSTUP_DIST_SERVER : https://mirrors.ustc.edu.cn/rust-static RUSTUP_UPDATE_ROOT : https://mirrors.ustc.edu.cn/rust-static/rustup 运行 rustup-init.exe (从官网下载) WIN：基于mingw64
自定义安装 :x86_64-pc-windows-gnu,stable,y WIN 基于 msvc(推荐)：
安装：visual c++ build tools Linux 0. 确保拥有c编译环境(gcc/cc等均可) 1. 创建2个文件夹并配置环境变量 CARGO_HOME=刚才创建的对应文件路径, RUSTUP_HOME=刚才创建的对应文件路径, export CARGO_HOME=~/Environment/RUST/CARGO export RUSTUP_HOME~/Environment/RUST/RUSTUP 2. 配置安装源: [设置环境变量] export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup 如下命令也可以 (#echo &amp;#39;export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile ) (#echo &amp;#39;export RUSTUP_UPDATE_ROOT : https://mirrors.ustc.edu.cn/rust-static/rustup&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile ) 3. curl https://sh.</description>
    </item>
    
    <item>
      <title>vscode常用插件及配置</title>
      <link>http://4fan.top/posts/vscode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 17 Aug 2020 21:03:43 +0000</pubDate>
      
      <guid>http://4fan.top/posts/vscode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E9%85%8D%E7%BD%AE/</guid>
      <description>本文为自用，仅供参考
** 2020.10.22更新**
Paste JSON as Code
leetcode : 力扣刷题用
Rainbow Fart
VSC Netease Music:网易云音乐
小霸王： 小霸王游戏机
rust
rust
rust-analyzer ：rust静态语法分析器
** 2020.8.5更新** TabNine (必备,很强，支持所有语言，但很吃内存) 必备：
beauty（代码格式化，支持主流语言）
Bracket Pair Colorizer(彩色括号，拯救你于重重调用)
chinese（汉化）
前端
Auto Close Tag
Auto rename Tag
HTML Snippets
color info
JavaScript (ES6) code snippets
open in browser
eslint
其它常用：
Code Runner：右键即可编译运行单文件，很方便
风格主题：
ayu
深海主题 Material Theme
吸血鬼主题 Dracula Official
One Dark Pro
设置背景图片[此插件修改通过vscode实现，小概率可能会导致vscode崩掉]：
插件：background
相关配置项：
background-size 参数的第一个设置背景图大小
opacity 设置背景图透明度，推荐0.</description>
    </item>
    
    <item>
      <title>linux shell编程</title>
      <link>http://4fan.top/posts/linux-shell%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 16 Aug 2020 20:47:48 +0000</pubDate>
      
      <guid>http://4fan.top/posts/linux-shell%E7%BC%96%E7%A8%8B/</guid>
      <description>preparing 查看当前操作系统的默认shell echo $SHELL
vimrc的推荐配置(非必须)
set nu set cursorline set autoindent autocmd BufNewFile *.sh 0r ~/.vim/template/sh &amp;mdash;&amp;gt;创建新文件的头文件
cd ..;ls #进入上一级目录再执行ls，结束后wd位于.. (cd ..;ls)	#进入上一级目录再执行ls,结束后wd位于.(fork,exec) #内建命令&amp;amp;外部命令(通过环境变量) #查看环境变量 env $path 说明：在学习时，以下提到的命令和demo大多可直接在shell中运行，无需编写成shell文件
第一个shell文件（vim sample.sh） #!/bin/bash #指定解析器 #仅支持单行注释，多行可以通过语句块实现 date echo &amp;#34;&amp;#34; echo &amp;#34;we are current in following path&amp;#34; /bin/pwd shell的运行(三种) chmod +x sample.sh ./sample.sh . sample.sh bash sample.sh 数据类型和变量 shell中只有字符串类型，有两种变量类型: 环境变量（类似于全局变量） 本地变量(类似于局部变量)
#声明变量 var=10 #不能有空格 #查看变量的值 echo $var #或 echo ${var} [推荐] #删除变量 unset var #控制语句 if,else,switch case,for,while.</description>
    </item>
    
    <item>
      <title>linux常用命令</title>
      <link>http://4fan.top/posts/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 11 Aug 2020 14:48:08 +0000</pubDate>
      
      <guid>http://4fan.top/posts/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>#查看帮助 man ins ins --help info ins vim set nu|nonu	--行号 #一般模式[default] #dd/d5d	删除当前行/删除当前行[包含] 后5行 #u	撤销上一步 #yy/y2y	复制当前行/复制当前行[包含]后5行 #x/X	del/backspace #dw/yw	删除一个词[光标放在首字母]/复制一个单词 #shift+^/$	移动到行头/尾 #(1)+shift+g	移动到页头/尾--&amp;gt;数字+操作==&amp;gt;移动到数字行 #编辑模式[从一般模式进入,按esc回到一般模式] #i/a[after]/o	当前光标处/后/下一行插入 #命令模式[从一般模式进入] #:----&amp;gt;w,q,!, (%s/old/new/g) #/----[查找]---&amp;gt;	n/N[shift+n]	下/上 一个 #?----[查找]---&amp;gt;	N[shift+n]/n	下/上 一个 ##-----------vim补充 快速跳转行首/尾： 0，^【是否带空格】 $ 【行尾】 跳转指定行: 1. 88G[88 shift g] 2. :88 跳转文件首/尾: gg:首 G尾 格式化: gg=G 括号对应: 命令模式 % 删除: x和X【命令模式】---&amp;gt;单个字符 dw---删除一个单词 D【shift+D】删除光标之后所有 或 d $ d0-----删除光标之前的 替换: r + 字符 删除指定区域： v[visual]--&amp;gt;选择区域-&amp;gt;d 删除指定行数: dNd 或者 Ndd 复制行: yy yNy 或者 Nyy 粘贴: p/P 实际上vim中无删除，只有剪切[结合 p]。 查找: 1.</description>
    </item>
    
    <item>
      <title>jave ide 配置</title>
      <link>http://4fan.top/posts/jave-ide-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 10 Aug 2020 20:42:25 +0000</pubDate>
      
      <guid>http://4fan.top/posts/jave-ide-%E9%85%8D%E7%BD%AE/</guid>
      <description>​	前几天，idea的教育授权被暂停了。说起来这事挺魔幻，18年时在某个群里边有人说自己白嫖了好几个upc的教育邮箱，当时在想这会对我有啥影响吗？但貌似跟我关系不大，然后现在就&amp;hellip;
然而生活还得继续下去😰，虽然，但是备用方案还得有，太依赖ide忽然ideGG了人也废了就不好了。另外这些也作为轻量级解决方案。避免自己下次配置踩坑&amp;ndash;&amp;gt;记录一下。
Preparing 配置jdk
配置maven
下载点此 配置环境变量 #例(linux) MAVEN_HOME=/usr/local/apache-maven-xxx PATH=$PATH:$MAVEN_HOME/bin	配置maven #1. 配置镜像(华为镜像为例) 下载配置文件： https://mirrors.huaweicloud.com/v1/configurations/maven? 替换: apache-maven-xxx/conf/settings.xml #2. 设置本地maven仓库 创建一个目录作为本地仓库(用于存放jar包) 在settings.xml中找到&amp;lt;localRepository&amp;gt;标签设置本地仓库路径 例(linux):&amp;lt;localRepository&amp;gt;/home/wide/java/maven_home&amp;lt;/localRepository&amp;gt; 注:本地仓库用于存放maven下载的包 1 Spring tool4方案 spring 官方提供的基于eclipse的开发工具
https://spring.io/tools
下载之后得到一个jar文件，使用 java -jar 命令解压。
注：sts4之前的为一个eclipse插件，需要在eclipse中安装。sts4为配置好插件的eclipse，直接解压即可使用
2 vscode解决方案 vscode安装java extension 和 Spring Boot Extension Pack两个插件
配置文件中必须完成以下两项：
#例(linux) { &amp;#34;java.configuration.maven.userSettings&amp;#34;: &amp;#34;/home/wide/java/apache-maven-3.3.3/conf/settings.xml&amp;#34;, &amp;#34;maven.executable.path&amp;#34;: &amp;#34;/home/wide/java/apache-maven-3.3.3/bin/mvn&amp;#34;, } 注: vscode下载language server时如果没有配置参数1将会从原始镜像下载，极慢 一些常用的maven命令 mvn install ---完成依赖(pom.xml所在目录中) mvn spring-boot:run ---运行spring boot项目 </description>
    </item>
    
    <item>
      <title>JWT原理介绍</title>
      <link>http://4fan.top/posts/jwt%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 13 Jul 2020 15:04:43 +0000</pubDate>
      
      <guid>http://4fan.top/posts/jwt%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>JWT(json web token原理介绍) 1. JWT构成 JWT(json web token)由三段分别用base64 URL算法加密构成，用.分割。
JWT头 (Header) + js // 表示加密协议和类型，以下为默认值 { &amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;, &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot; } 有效载荷 (Payload) + js //JWT 规定了7个官方字段，供选用，也可以包含自定义内容 { iss (issuer)：签发人 exp (expiration time)：过期时间 sub (subject)：主题 aud (audience)：受众 nbf (Not Before)：生效时间 iat (Issued At)：签发时间 jti (JWT ID)：编号 } // 默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。 3. **签名哈希** HMACSHA256(base64UrlEncode(header) + &amp;#34;.&amp;#34;+base64UrlEncode(payload),secret) // secret即盐值 ​
2. JWT使用及验证 使用流程：前端请求后端获取令牌并保存在cookie或 localStorage，需要时在请求中附带，后端获取并验证。
前端一般使用如下协议头: &amp;#39;Authorization&amp;#39;: &amp;#39;Bearer &amp;#39; + token 后端验证流程：获取jwt按照生成方式重新生成并对比。
jwt = request.</description>
    </item>
    
    <item>
      <title>spring boot restful光速无痛入门</title>
      <link>http://4fan.top/posts/spring-boot-restful%E5%85%89%E9%80%9F%E6%97%A0%E7%97%9B%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 08 Jul 2020 22:40:50 +0000</pubDate>
      
      <guid>http://4fan.top/posts/spring-boot-restful%E5%85%89%E9%80%9F%E6%97%A0%E7%97%9B%E5%85%A5%E9%97%A8/</guid>
      <description>spring boot restful光速无痛入门 hello world 我将让你以最快的速度先看到内容，请一步一步跟着做，然后将讲解内容。
创建项目：通过spring initialz创建。
打开网站，按照以下选择
Version：任意，推荐无任何备注的
Project：Maven Project Language:Java packaging:Jar Java:推荐8
在右侧选择依赖：加入Spring Web
在下侧选择generate下载生成的项目文件并解压。
使用idea，载入项目。等待maven完成依赖和目录初始化。
创建路由类：
在src/main/java/****下创建controller文件夹[将在此文件夹下完成业务]，在文件夹下创建一个类，填写以下代码并导入相关类。 @RestController public class Index { @GetMapping(&amp;#34;/&amp;#34;) public String index(){ return &amp;#34;恭喜你完成第一步&amp;#34;; } } 启动项目，打开 localhost:8080/，你可以看到内容了~。 相关的目录结构：
spring系列框架的理解
spring: 百科中有如下解释“ 针对bean的生命周期进行管理的轻量级容器 ， 提供了功能强大IOC、AOP及Web MVC等功能 ” 。
我的理解[估计不对，不敢信的]：连接池 + xml ==&amp;gt;解耦，高效。
spring boot: 耦合性是降低了，但是xml中的各种配置参数让人懵B，属实劝退。spring boot就是为了解决这种问题，即通过提供各种功能的默认参数尽可能的减少配置以便快速跑起来。[spring boot启动时会优先使用自定义的配置，如果没有就使用默认的]
spring boot的starter: 将其原本的功能封装好并加入默认配置的jar包。
版本的问题？
在上边我们创建项目时可以选择spring boot的版本，那么各种版本的区别是什么呢？版本介绍：
你可以在这里看到spring boot的各种版本，以下是各个版本的含义：
​	GA ：稳定版本
​	CURRENT: 最新不一定稳定
​	SHAPSHOT：开发版</description>
    </item>
    
    <item>
      <title>微服务入门</title>
      <link>http://4fan.top/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 29 Jun 2020 12:16:18 +0000</pubDate>
      
      <guid>http://4fan.top/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/</guid>
      <description>什么是微服务？ 六特征 一组小的服务
独立的进程: 例如容器等
轻量级通信: http,json
基于业务能力
独立部署:团队间无依赖，独立进行，迭代速度快
无集中式管理：可以使用独立的技术栈
特点 松散耦合(loosely coupled) 面向服务(soa) 独立数据源(bounded context) 思考：独立部署后有什么好处？ 每个团队独立数据源时有什么挑战？ 微服务利弊权衡 利 强模块化边界 可独立部署(低协同开销) 技术多样性 弊 分布式复杂性 最终一致性 运维复杂性 测试复杂性 思考：运维团队如何面对这样的复杂性？ 康威法则 设计系统的组织，其产生的设计和架构等价于组织间的沟通结构
单块应用与多团队矛盾，沟通协同成本大，测试复杂，交付能力差 思考：架构师为什么既需要再考虑技术架构时也要去考虑组织架构？ 企业应该在什么时候引入微服务？ 初期主要是验证商业模式，而微服务存在基础设施的投资，需要一定的基础设施。
一般认为团队接近百人时考虑
我在设计初期时如何考虑呢？ 单块优先(未验证商业模式，模式不成熟稳定，因此风险高)，逐步引入，逐步分解 思考：架构是设计出来的还是演化出来的？ 什么样的组织架构更适合微服务？ 传统组织架构及其缺点： 产品管理团队，用户体验团队，研发团队，测试团队，...DBA团队，运维团队 缺点：沟通协同成本大，反馈周期长，研发效率低下，业务支持慢 基于微服务的跨职能的团队 微服务的跨职能的团队[一般12人左右]*n==&amp;gt;API|团队平台
端到端：who build it,who run it 思考：如何理解微服务本质上是一种组织架构的重组？ 如何理解阿里巴巴提出的微服务的中台战略？ 大中台小前台
知乎：中台到底是什么？ 思考:对于架构师大中台小前台战屡如何在自己的公司实现? 服务分层 逻辑性的分层
思考：如何将目前公司的服务映射到基础服务和聚合服务上 微服务总体技术架构体系 思考: 为什么初创团队直接切入微服务？ 最经典的三种服务发现机制 服务发现：消费者寻找生产者
1. 传统基于LB模式【简单，需要运维介入，集中式LB挂掉可能导致整个服务无法访问，有一些性能损失】 2. 进程内LB模式【无集中式LB即不存在单点问题,性能好，必须为每个client开发均衡器，多语言支持成本高】 3. 主机读LB模式【方案12的结合，需要每一台主机上运行一个LB 运维成本高】 思考：最新提出的service mesh使用的是哪一种服务发现机制？ 微服务网关原理 为什么要引入网关？屏蔽内部细节</description>
    </item>
    
    <item>
      <title>fork，异步回调 和 协程 对比</title>
      <link>http://4fan.top/posts/fork%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jun 2020 13:55:05 +0000</pubDate>
      
      <guid>http://4fan.top/posts/fork%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E5%8D%8F%E7%A8%8B/</guid>
      <description>目的：提高效率，充分利用多核
要解决的问题：上下文状态的保存
实现对比：
​	fork&amp;mdash;&amp;gt;保存在栈中，交给操作系统。
​	异步回调&amp;mdash;&amp;gt;自己实现。
​	协程&amp;mdash;&amp;gt;保存在栈上，用户态完成。
效率对比：异步回调 &amp;gt; 协程 [据某位大佬说异步回调大概是协程10倍]&amp;gt; fork
优缺点对比:
fork：实现简单，效率低，不能支持大量并发。
异步回调：效率很高，实现复杂。
协程：效率较高，实现简单，解放心智。
注：由于实际工程中，协程/异步回调中的代码段往往包含很多逻辑，而协程部分的性能损耗远低于业务逻辑，因此协程是一种比较好的方案。</description>
    </item>
    
    <item>
      <title>最长寒假的总结</title>
      <link>http://4fan.top/posts/%E6%9C%80%E9%95%BF%E5%AF%92%E5%81%87%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 14 May 2020 14:21:32 +0000</pubDate>
      
      <guid>http://4fan.top/posts/%E6%9C%80%E9%95%BF%E5%AF%92%E5%81%87%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>大概分成两个阶段吧：开学前，假如开学的时间。
​	回家之前在图书馆借了两本书，年前年后看了《区块链：密码共识原理、产业与应用》 ，重点看了下密码共识相关的和目前已经发的那些币之间的各种区别。emm，貌似也忘完了。===&amp;gt;一定要做笔记!!
​	在这期间大概看了一点 vue 的东西，相当于把之前的东西捡了一点起来。也看了C的一些进阶的东西。
​	另外一本书 是关于 操作系统的，一直陆陆续续的，看到今天，也没看多少😢，还得继续啃。[这本是太难啃了]
​	然后就是看Go了，跟着qimi大佬重学了基础和进阶的，然后附带看了操作数据库的，gin框架，gorm，etcd，nsq==。之后整天跟着群友和夜读开始了解一些Go底层的东西，比如GC，GMP模型，看了很小很小一部分的标准库的源码，有Context，slice====&amp;gt;也没整明白。😅
​	这期间用Go也写了一些小demo，有web，爬虫==。 Go圣经看了一部分，。还看了docker的基础东西。(k8s是不可能学的，这种大坑不能跳)。看了Go圣经
​	看Go进阶和底层那块说实话没看懂多少，缺少很多东西做铺垫。这就===&amp;gt;操作系统和之后Linux相关的埋了坑。
​	再之后[假如开学的时间]看了MySQL(偏重于实战和调优)的，还企图看DBA的，放弃了。因为某个讲师讲的挺好，加上之前从来没系统看过Linux的，就顺带把Linux基础的命令看了。
​	四月中旬，看了一节IO多路复用，讲真对于我这种菜鸟，sstrace ff这个命令AC格太高了，然后加上之前Go还有其它时间看blog的疑惑=====&amp;gt;看了Linux系统编程，[相当于 非常粗浅的 过了 apue的一部分]，接着上边又把网络编程看了[相当于 非常粗浅的 过了 unp的一部分]。这两本书非常推荐，[虽然我还没看,但群里还有网上很多大佬都说很重要，我觉着很有道理(算了算了，有时间不如打打游戏)]。
​	所以这学期可能是游戏打的最多的一段时间了[综合各方面，持续时间长而稳定]，所以是我目前最高段位了。前期少数时间反向上分，后期基本上不去了😢。枪3，0.9+kd，但我不是把负哥[把把都是负战绩]🤣，状态不够稳定，手感好能20杀轻松拿下，能空砍 10+难救主 ，手感差能0-6，2-7😂
​	然后还间歇的看了点redis[真就一点点]，博客&amp;ndash;&amp;gt;hexo 博客又回到hexo了，看了(真)一点点rust，Haskell的语法，还有密码学的一点点基础。还有至今貌似依然0进展的c ligth框架[虽然最近有一点点思路，但是怕是还要凉]，还要那个企图用websocket写的游戏====&amp;gt;算了，真有时间再搞了。
​	留下了笔记和一堆的困惑、疑问。学的越多困惑越多😂。
​</description>
    </item>
    
    <item>
      <title>restart in hexo</title>
      <link>http://4fan.top/posts/restart-in-hexo/</link>
      <pubDate>Mon, 30 Mar 2020 19:31:44 +0000</pubDate>
      
      <guid>http://4fan.top/posts/restart-in-hexo/</guid>
      <description>restart in hexo 一个标题 博客跑了一段时间了，上一个跑在阿里云上的也跑了半年多了。
时间总是过的很快。从虚拟主机CPanel到hostdie，还有博客园，如今跌跌撞撞最后又回到了hexo。原因无它：简单。
以前总觉着自己写一套模板，用别人的总觉着太low。现在却以简为美，反而对这些花里胡哨的东西失了兴趣。也不再打算自写或者重构博客了，以后将一直用hexo。之前的博客也将逐步搬移过来【但可能有点麻烦，毕竟不是hexo写的，也没用md】。
希望用博客记录自己成长。
写给自己： 多看书，学点找到编程无关的东西
近期要做的： 看基础的书
数据库相关
刷leetcode</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>http://4fan.top/about/</link>
      <pubDate>Mon, 30 Mar 2020 19:31:44 +0000</pubDate>
      
      <guid>http://4fan.top/about/</guid>
      <description>关于我 学生
没有更多信息了呢
GitHub @lonely-root-number2</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>http://4fan.top/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://4fan.top/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>http://4fan.top/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://4fan.top/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
