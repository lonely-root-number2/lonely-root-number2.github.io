<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>错误处理 on DY&#39;s blog</title>
    <link>http://4fan.top/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
    <description>Recent content in 错误处理 on DY&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 14 Mar 2022 16:19:09 +0000</lastBuildDate><atom:link href="http://4fan.top/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go错误处理</title>
      <link>http://4fan.top/posts/go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 14 Mar 2022 16:19:09 +0000</pubDate>
      
      <guid>http://4fan.top/posts/go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>Sentinel errors 哨兵模式，例如
​	if io == io.EOF 优缺点：需要导包，可能循环引用
Error Types ​	包含error以及其它信息的结构体
优缺点：需要导包，循环引用。但可得到更多的信息。比哨兵模式更好一点。
Opaque errors 黑盒策略，不关心具体错误类型，有错误则返回否则继续或根据是否具有某种行为（实现某种接口）判断是否重试。demo：
func fn() error { x, err := bar.Foo() if err != nil { return err } // use x return nil } // type temporary interface {	Temporary() bool} func IsTemporary(err error) bool {	te, ok := err.(temporary)	return ok &amp;amp;&amp;amp; te.Temporary() } pkg/errors 携带一个message并可返回原始error以进行Sentinel errors比较的库：github.com/pkg/errors 可避免在多个层多次处理eror
go1.13标准库的升级 https://www.flysnow.org/2019/09/06/go1.13-error-wrapping.html
errorf %w &amp;ndash;&amp;gt;不丢失原error的wrap error。 Unwrap 解一层wrap error Is wrap chain中是否包含 As error转换（断言） rob pike：Errors are values 法1：</description>
    </item>
    
  </channel>
</rss>
